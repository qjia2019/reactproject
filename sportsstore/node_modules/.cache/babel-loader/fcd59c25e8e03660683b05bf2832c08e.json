{"ast":null,"code":"import { graphql, compose } from \"react-apollo\";\nimport { ordersSummaryQuery } from \"./clientQueries\";\nimport { OrdersTable } from \"./OrdersTable\";\nimport { shipOrder } from \"./clientMutations\";\nvar vars = {\n  onlyShipped: false,\n  page: 1,\n  pageSize: 10,\n  sort: \"id\"\n};\nexport var OrdersConnector = compose(graphql(ordersSummaryQuery, {\n  options: function options(props) {\n    return {\n      variables: vars\n    };\n  },\n  props: function props(_ref) {\n    var _ref$data = _ref.data,\n        loading = _ref$data.loading,\n        orders = _ref$data.orders,\n        refetch = _ref$data.refetch;\n    return {\n      totalSize: loading ? 0 : orders.totalSize,\n      orders: loading ? [] : orders.orders,\n      currentPage: vars.page,\n      pageCount: loading ? 0 : Math.ceil(orders.totalSize / vars.pageSize),\n      navigateToPage: function navigateToPage(page) {\n        vars.page = Number(page);\n        refetch(vars);\n      },\n      pageSize: vars.pageSize,\n      setPageSize: function setPageSize(size) {\n        vars.pageSize = Number(size);\n        refetch(vars);\n      },\n      sortKey: vars.sort,\n      setSortProperty: function setSortProperty(key) {\n        vars.sort = key;\n        refetch(vars);\n      }\n    };\n  }\n}), graphql(shipOrder, {\n  props: function props(_ref2) {\n    var mutate = _ref2.mutate;\n    return {\n      toggleShipped: function toggleShipped(id, shipped) {\n        return mutate({\n          variables: {\n            id: id,\n            shipped: shipped\n          }\n        });\n      }\n    };\n  }\n}))(OrdersTable);","map":{"version":3,"sources":["C:\\Users\\Qianlan Jia\\Desktop\\coding play\\react\\sportsstore\\src\\admin\\OrdersConnector.js"],"names":["graphql","compose","ordersSummaryQuery","OrdersTable","shipOrder","vars","onlyShipped","page","pageSize","sort","OrdersConnector","options","props","variables","data","loading","orders","refetch","totalSize","currentPage","pageCount","Math","ceil","navigateToPage","Number","setPageSize","size","sortKey","setSortProperty","key","mutate","toggleShipped","id","shipped"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,OAAlB,QAAiC,cAAjC;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,SAAT,QAA0B,mBAA1B;AAEA,IAAMC,IAAI,GAAG;AACTC,EAAAA,WAAW,EAAE,KADJ;AACWC,EAAAA,IAAI,EAAE,CADjB;AACoBC,EAAAA,QAAQ,EAAE,EAD9B;AACkCC,EAAAA,IAAI,EAAE;AADxC,CAAb;AAIA,OAAO,IAAMC,eAAe,GAAGT,OAAO,CAClCD,OAAO,CAACE,kBAAD,EACH;AACIS,EAAAA,OAAO,EAAE,iBAACC,KAAD;AAAA,WAAY;AAAEC,MAAAA,SAAS,EAAER;AAAb,KAAZ;AAAA,GADb;AAEIO,EAAAA,KAAK,EAAE;AAAA,yBAAEE,IAAF;AAAA,QAAUC,OAAV,aAAUA,OAAV;AAAA,QAAmBC,MAAnB,aAAmBA,MAAnB;AAAA,QAA2BC,OAA3B,aAA2BA,OAA3B;AAAA,WAA2C;AAC9CC,MAAAA,SAAS,EAAEH,OAAO,GAAG,CAAH,GAAOC,MAAM,CAACE,SADc;AAE9CF,MAAAA,MAAM,EAAED,OAAO,GAAG,EAAH,GAAOC,MAAM,CAACA,MAFiB;AAG9CG,MAAAA,WAAW,EAAEd,IAAI,CAACE,IAH4B;AAI9Ca,MAAAA,SAAS,EAAEL,OAAO,GAAG,CAAH,GAAOM,IAAI,CAACC,IAAL,CAAUN,MAAM,CAACE,SAAP,GAAmBb,IAAI,CAACG,QAAlC,CAJqB;AAK9Ce,MAAAA,cAAc,EAAE,wBAAChB,IAAD,EAAU;AAAEF,QAAAA,IAAI,CAACE,IAAL,GAAYiB,MAAM,CAACjB,IAAD,CAAlB;AAA0BU,QAAAA,OAAO,CAACZ,IAAD,CAAP;AAAc,OALtB;AAM9CG,MAAAA,QAAQ,EAAEH,IAAI,CAACG,QAN+B;AAO9CiB,MAAAA,WAAW,EAAE,qBAACC,IAAD,EACT;AAAErB,QAAAA,IAAI,CAACG,QAAL,GAAgBgB,MAAM,CAACE,IAAD,CAAtB;AAA8BT,QAAAA,OAAO,CAACZ,IAAD,CAAP;AAAc,OARJ;AAS9CsB,MAAAA,OAAO,EAAEtB,IAAI,CAACI,IATgC;AAU9CmB,MAAAA,eAAe,EAAE,yBAACC,GAAD,EAAS;AAAExB,QAAAA,IAAI,CAACI,IAAL,GAAYoB,GAAZ;AAAiBZ,QAAAA,OAAO,CAACZ,IAAD,CAAP;AAAc;AAVb,KAA3C;AAAA;AAFX,CADG,CAD2B,EAkBlCL,OAAO,CAACI,SAAD,EAAY;AACfQ,EAAAA,KAAK,EAAE;AAAA,QAAGkB,MAAH,SAAGA,MAAH;AAAA,WAAiB;AACpBC,MAAAA,aAAa,EAAE,uBAACC,EAAD,EAAKC,OAAL;AAAA,eAAiBH,MAAM,CAAC;AAAEjB,UAAAA,SAAS,EAAE;AAAEmB,YAAAA,EAAE,EAAFA,EAAF;AAAMC,YAAAA,OAAO,EAAPA;AAAN;AAAb,SAAD,CAAvB;AAAA;AADK,KAAjB;AAAA;AADQ,CAAZ,CAlB2B,CAAP,CAuB7B9B,WAvB6B,CAAxB","sourcesContent":["import { graphql, compose } from \"react-apollo\";\nimport { ordersSummaryQuery } from \"./clientQueries\";\nimport { OrdersTable } from \"./OrdersTable\";\nimport { shipOrder } from \"./clientMutations\";\n\nconst vars = {\n    onlyShipped: false, page: 1, pageSize: 10, sort: \"id\"\n}\n\nexport const OrdersConnector = compose(\n    graphql(ordersSummaryQuery,\n        {\n            options: (props) => ({ variables: vars }),\n            props: ({data: { loading, orders, refetch }}) => ({\n                totalSize: loading ? 0 : orders.totalSize,\n                orders: loading ? []: orders.orders,\n                currentPage: vars.page,\n                pageCount: loading ? 0 : Math.ceil(orders.totalSize / vars.pageSize),\n                navigateToPage: (page) => { vars.page = Number(page); refetch(vars)},\n                pageSize: vars.pageSize,            \n                setPageSize: (size) =>\n                    { vars.pageSize = Number(size); refetch(vars)},\n                sortKey: vars.sort,\n                setSortProperty: (key) => { vars.sort = key; refetch(vars)},\n            })\n        }\n    ),\n    graphql(shipOrder, {\n        props: ({ mutate }) => ({\n            toggleShipped: (id, shipped) => mutate({ variables: { id, shipped }})\n        })\n    })\n)(OrdersTable);\n"]},"metadata":{},"sourceType":"module"}