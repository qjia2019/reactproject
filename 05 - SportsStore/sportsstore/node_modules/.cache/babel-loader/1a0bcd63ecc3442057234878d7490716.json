{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Qianlan Jia\\\\Desktop\\\\coding play\\\\react\\\\05 - SportsStore\\\\sportsstore\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { graphql, compose } from \"react-apollo\";\nimport { ProductsTable } from \"./ProductsTable\";\nimport { productsList } from \"./clientQueries\";\nimport { deleteProduct } from \"./clientMutations\";\nvar vars = {\n  page: 1,\n  pageSize: 10,\n  sort: \"id\"\n};\nexport var ConnectedProducts = compose(graphql(productsList, {\n  options: function options(props) {\n    return {\n      variables: vars\n    };\n  },\n  props: function props(_ref) {\n    var _ref$data = _ref.data,\n        loading = _ref$data.loading,\n        products = _ref$data.products,\n        refetch = _ref$data.refetch;\n    return {\n      totalSize: loading ? 0 : products.totalSize,\n      products: loading ? [] : products.products,\n      currentPage: vars.page,\n      pageCount: loading ? 0 : Math.ceil(products.totalSize / vars.pageSize),\n      navigateToPage: function navigateToPage(page) {\n        vars.page = Number(page);\n        refetch(vars);\n      },\n      pageSize: vars.pageSize,\n      setPageSize: function setPageSize(size) {\n        vars.pageSize = Number(size);\n        refetch(vars);\n      },\n      sortKey: vars.sort,\n      setSortProperty: function setSortProperty(key) {\n        vars.sort = key;\n        refetch(vars);\n      }\n    };\n  }\n}), graphql(deleteProduct, {\n  options: {\n    update: function update(cache, _ref2) {\n      var id = _ref2.data.deleteProduct.id;\n      var queryDetails = {\n        query: productsList,\n        variables: vars\n      };\n      var data = cache.readQuery(queryDetails);\n      data.products.products = data.products.products.filter(function (p) {\n        return p.id !== id;\n      });\n      data.products.totalSize = data.products.totalSize - 1;\n      cache.writeQuery(_objectSpread({}, queryDetails, {\n        data: data\n      }));\n    }\n  },\n  props: function props(_ref3) {\n    var mutate = _ref3.mutate;\n    return {\n      deleteProduct: function deleteProduct(id) {\n        return mutate({\n          variables: {\n            id: id\n          }\n        });\n      }\n    };\n  }\n}))(ProductsTable);","map":{"version":3,"sources":["C:\\Users\\Qianlan Jia\\Desktop\\coding play\\react\\05 - SportsStore\\sportsstore\\src\\admin\\ProductsConnector.js"],"names":["graphql","compose","ProductsTable","productsList","deleteProduct","vars","page","pageSize","sort","ConnectedProducts","options","props","variables","data","loading","products","refetch","totalSize","currentPage","pageCount","Math","ceil","navigateToPage","Number","setPageSize","size","sortKey","setSortProperty","key","update","cache","id","queryDetails","query","readQuery","filter","p","writeQuery","mutate"],"mappings":"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","sourcesContent":["import { graphql, compose } from \"react-apollo\";\nimport { ProductsTable } from \"./ProductsTable\";\nimport { productsList } from \"./clientQueries\";\nimport { deleteProduct } from \"./clientMutations\";\n\nconst vars = {\n    page: 1, pageSize: 10, sort: \"id\"\n}\n\nexport const ConnectedProducts = compose(\n    graphql(productsList,\n        {\n            options: (props) => ({ variables: vars }),\n            props: ({data: { loading, products, refetch }}) => ({\n                totalSize: loading ? 0 : products.totalSize,\n                products: loading ? []: products.products,\n                currentPage: vars.page,\n                pageCount: loading ? 0 \n                    : Math.ceil(products.totalSize / vars.pageSize),\n                navigateToPage: (page) => { vars.page = Number(page); refetch(vars)},\n                pageSize: vars.pageSize,            \n                setPageSize: (size) => \n                    { vars.pageSize = Number(size); refetch(vars)},\n                sortKey: vars.sort,\n                setSortProperty: (key) => { vars.sort = key; refetch(vars)},\n            })\n        }\n    ),\n    graphql(deleteProduct, \n        {\n            options: {\n                update: (cache, { data: { deleteProduct: { id }}}) => {\n                    const queryDetails = { query: productsList, variables: vars };\n                    const data = cache.readQuery(queryDetails)\n                    data.products.products = \n                        data.products.products.filter(p => p.id !== id);\n                    data.products.totalSize = data.products.totalSize - 1;\n                    cache.writeQuery({...queryDetails, data });\n                }\n        },\n        props: ({ mutate }) => ({\n            deleteProduct: (id) => mutate({ variables: { id }})\n        })\n    })\n)(ProductsTable);\n"]},"metadata":{},"sourceType":"module"}